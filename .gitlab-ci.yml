stages:
  - lint
  - build
  - duplicate-check
  - test
  - deploy

variables:
  PUBLIC_API_URL: "http://127.0.0.1:8000"

cache:
  key: ${CI_COMMIT_REF_SLUG}-node-modules
  paths:
    - node_modules/

lint backend:
  stage: lint
  image: python:3.11
  script:
    - echo "Linting the backend"
    - python --version
    - pip install --upgrade pip
    - pip install black
    - cd backend
    - black --check .
  only:
    - merge_requests

lint frontend:
  stage: lint
  image: node:20
  script:
    - echo "Linting the frontend"
    - cd frontend
    - npm ci
    - npm run lint
    - npm run check
  only:
    - merge_requests

build frontend:
  stage: build
  image: node:20
  script:
    - echo "Building the project"
    - cd frontend
    - npm i --cache .npm --prefer-offline
    - npm run build
  only:
    - merge_requests
  dependencies:
    - lint frontend

frontend check:
  stage: duplicate-check
  image: node:20
  script:
    - echo "Checking for duplicate files in the frontend"
    - cd frontend
    - npm i --cache .npm --prefer-offline
    - npm run duplication-check
  only:
    - merge_requests
  dependencies:
    - lint frontend

test backend:
  stage: test
  image: python:3.9
  script:
    - echo "Testing the backend"
    - pip install --upgrade pip
    - pip install pytest httpx pytest-asyncio
    - cd backend
    - pip install -r requirements.txt
    - |
      cat <<EOF > .env
      TEST=true
      SECRET_KEY=test
      isAdmin=false
      production=false
      client_id = ""
      client_secret = ""
      REDIRECT_URI = ""
      BASE_URL = ""
      MAIL_USERNAME = $MAIL_USERNAME
      MAIL_PASSWORD = $MAIL_PASSWORD
      MAIL_FROM = $MAIL_FROM
      MAIL_PORT = $MAIL_PORT
      MAIL_SERVER = $MAIL_SERVER
      EOF
    - pytest -p no:warnings
  only:
    - merge_requests

deploy-frontend:
  stage: deploy
  image: node:19
  script:
    - echo "Deploying to Vercel for the frontend"
    - cd frontend
    - |
      cat <<EOF > .env
      PUBLIC_API_URL = $PUBLIC_API_URL
      EOF
    - npx vercel --token $VERCEL_TOKEN --confirm=n --prod --name frontend
  only:
    - dev
  environment:
    name: production
  variables:
    VERCEL_TOKEN: $VERCEL_TOKEN
    PUBLIC_API_URL: $PUBLIC_API_URL

deploy-backend:
  stage: deploy
  image: node:19
  script:
    - echo "Deploying to Heroku for the backend"
    - cd backend
    - | 
      cat <<EOF > .env
      SECRET_KEY = $SECRET_KEY
      isAdmin=false
      production = true
      client_id = $CLIENT_ID
      client_secret = $CLIENT_SECRET
      DATABASE_URI = $DATABASE_URI
      REDIRECT_URI = $REDIRECT_URI
      BASE_URL = $BASE_URL
      MAIL_USERNAME = $MAIL_USERNAME
      MAIL_PASSWORD = $MAIL_PASSWORD
      MAIL_FROM = $MAIL_FROM
      MAIL_PORT = $MAIL_PORT
      MAIL_SERVER = $MAIL_SERVER
      UID = ""
      EMAIL_USER = ""
      USER_EMAIL = ""
      TEST_ACCOUNT = false
      OPENAI_KEY = $OPENAI_KEY
      EOF
    - npx vercel --token $VERCEL_TOKEN --confirm=n --prod --name backend
  variables:
    VERCEL_TOKEN: $VERCEL_TOKEN
    SECRET_KEY: $SECRET_KEY
    CLIENT_ID: $CLIENT_ID
    CLIENT_SECRET: $CLIENT_SECRET
    REDIRECT_URI: $REDIRECT_URI
    BASE_URL: $BASE_URL
    MAIL_USERNAME: $MAIL_USERNAME
    MAIL_PASSWORD: $MAIL_PASSWORD
    MAIL_FROM: $MAIL_FROM
    MAIL_PORT: $MAIL_PORT
    MAIL_SERVER: $MAIL_SERVER
    DATABASE_URI: $DATABASE_URI
    OPENAI_KEY: $OPENAI_KEY
  only:
    - dev
  environment:
    name: production

